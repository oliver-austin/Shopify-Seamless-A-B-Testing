import * as tslib_1 from "tslib";
import * as React from 'react';
import { classNames } from '@shopify/react-utilities/styles';
import { autobind } from '@shopify/javascript-utilities/decorators';
import { noop } from '../../../../utilities/other';
import Icon from '../../../Icon';
import styles from './SearchField.scss';
export default class SearchField extends React.Component {
    constructor() {
        super(...arguments);
        this.input = React.createRef();
    }
    componentDidMount() {
        const { focused } = this.props;
        const { input: { current: input }, } = this;
        if (input && focused) {
            input.focus();
        }
    }
    componentDidUpdate({ focused: wasFocused }) {
        const { input: { current: input }, } = this;
        if (input == null) {
            return;
        }
        const { focused } = this.props;
        if (focused && !wasFocused) {
            input.focus();
        }
        else if (!focused && wasFocused) {
            input.blur();
        }
    }
    render() {
        const { value, focused, active, placeholder } = this.props;
        const clearMarkup = value !== '' && (<button type="button" aria-label="Clear" className={styles.Clear} onClick={this.handleClear}>
        <Icon source="circleCancel"/>
      </button>);
        const className = classNames(styles.SearchField, (focused || active) && styles.focused);
        return (<div className={className} onFocus={this.handleFocus} onBlur={this.handleBlur}>
        <input className={styles.Input} placeholder={placeholder} type="search" autoCapitalize="off" autoComplete="off" autoCorrect="off" ref={this.input} value={value} onChange={this.handleChange} onKeyDown={preventDefault}/>
        <span className={styles.Icon}>
          <Icon source="search"/>
        </span>

        {clearMarkup}
        <div className={styles.Backdrop}/>
      </div>);
    }
    handleFocus() {
        const { onFocus } = this.props;
        if (onFocus) {
            onFocus();
        }
    }
    handleBlur() {
        const { onBlur } = this.props;
        if (onBlur) {
            onBlur();
        }
    }
    handleClear() {
        const { onCancel = noop, onChange } = this.props;
        const { input: { current: input }, } = this;
        onCancel();
        if (input != null) {
            input.value = '';
            onChange('');
            input.focus();
        }
    }
    handleChange({ currentTarget }) {
        const { onChange } = this.props;
        onChange(currentTarget.value);
    }
}
tslib_1.__decorate([
    autobind
], SearchField.prototype, "handleFocus", null);
tslib_1.__decorate([
    autobind
], SearchField.prototype, "handleBlur", null);
tslib_1.__decorate([
    autobind
], SearchField.prototype, "handleClear", null);
tslib_1.__decorate([
    autobind
], SearchField.prototype, "handleChange", null);
function preventDefault(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
    }
}

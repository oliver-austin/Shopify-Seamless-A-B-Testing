{"version":3,"file":"static/webpack/static\\development\\pages\\create-test.js.0efcd9a70630173340df.hot-update.js","sources":["webpack:///./pages/create-test.js"],"sourcesContent":["import gql from 'graphql-tag';\r\nimport { Button, Caption, Card, Checkbox, DropZone, EmptyState, Form, FormLayout, Heading, Layout, Page, ResourceList, Select, Stack, Subheading, TextField, Thumbnail } from '@shopify/polaris';\r\nimport {Context} from \"@shopify/app-bridge-react\";\r\nimport {Redirect} from \"@shopify/app-bridge/actions\";\r\nimport store from \"store-js\";\r\nimport {Query} from \"react-apollo\";\r\nimport Product from \"../data_classes/Product\"\r\nimport Modal from \"@shopify/app-bridge-react/components/Modal\";\r\nimport ResourceListWithProducts from \"../components/ResourceList\";\r\nimport $ from \"jquery\";\r\n\r\n//TODO: fetch all variants, not first 10\r\nconst GET_SHOP_ID = gql`\r\n    query getShopID {\r\n            shop{\r\n                id\r\n            }\r\n    }\r\n`;\r\nconst GET_PRODUCT_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        description\r\n        id\r\n        totalVariants\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 10) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n              image {\r\n                originalSrc\r\n                altText\r\n              }\r\n              displayName\r\n              compareAtPrice\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass CreateTestVariant extends React.Component {\r\n    static contextType = Context;\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            files: [],\r\n            productSelected: 'product',\r\n            variantSelected: 0,\r\n            productTitle: '',\r\n            productDescription: '',\r\n            productImage: '',\r\n            variantTitle: '',\r\n            variantPrice: '',\r\n            variantDiscount: ''\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        const productOrVariantSelectOptions = [{ label: 'Product', value: 'product' }, { label: 'Variants', value: 'variants' }];\r\n        const app = this.context;\r\n\r\n        const {files} = this.state;\r\n        const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\r\n        console.log(this.state.files);\r\n        if(this.state.files.length != 0){\r\n            console.log(window.URL.createObjectURL(this.state.files[0]));\r\n        }\r\n\r\n        const fileUpload = !files.length && <DropZone.FileUpload />;\r\n        const uploadedFiles = files.length > 0 && (\r\n\r\n            <Stack vertical>\r\n                {files.map((file, index) => (\r\n                    <Stack alignment=\"center\" key={index}>\r\n                        <Thumbnail\r\n                            size=\"large\"\r\n                            alt={file.name}\r\n                            source={\r\n                                validImageTypes.indexOf(file.type) > 0\r\n                                    ? window.URL.createObjectURL(file)\r\n                                    : 'https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304'\r\n                            }\r\n                        />\r\n                        <div>\r\n                            {file.name} <Caption>{file.size} bytes</Caption>\r\n                        </div>\r\n                    </Stack>\r\n                ))}\r\n            </Stack>\r\n        );\r\n\r\n        return (\r\n            <Query query={GET_PRODUCT_BY_ID} variables={{ ids: store.get('ids') }}>\r\n                {({data, loading, error}) => {\r\n                    if (loading) { return <div>Loading…</div>; }\r\n                    if (error) { return <div>{error.message}</div>; }\r\n                    const variantsArray = data.nodes[0].variants.edges;\r\n                    const variantSelectOptions = [];\r\n                    variantsArray.forEach(function(variant, index) {\r\n                        variantSelectOptions.push({label: variant.node.displayName, value: index})\r\n                    });\r\n                    return (\r\n                        <Query query={GET_SHOP_ID}>\r\n                            {({data: { shop }, loading, error}) => {\r\n                                if (loading) {\r\n                                    return <div>Loading…</div>;\r\n                                }\r\n                                if (error) {\r\n                                    return <div>{error.message}</div>;\r\n                                }\r\n                                console.log(\"ID\", shop.id);\r\n\r\n                                return (\r\n                                    <Page\r\n                                        primaryAction={{\r\n                                            content: 'Create A/B Test',\r\n                                            onAction: () => console.log(\"primary action\"),\r\n                                        }}\r\n                                    >\r\n                                        <Select\r\n                                            label=\"Create test for:\"\r\n                                            disabled={false}\r\n                                            options={productOrVariantSelectOptions}\r\n                                            onChange={this.handleProductOrVariantSelectChange.bind(this, data)}\r\n                                            value={this.state.productSelected}/>\r\n\r\n                                        {this.state.productSelected === 'product' ? (\r\n                                            <Form onSubmit={this.handleProductSubmit(data, shop.id)}>\r\n                                                <FormLayout>\r\n                                                    <Stack>\r\n                                                        <Thumbnail\r\n                                                            size=\"large\"\r\n                                                            source={\r\n                                                                data.nodes[0].images.edges[0]\r\n                                                                    ? data.nodes[0].images.edges[0].node.originalSrc\r\n                                                                    : ''\r\n                                                            }\r\n                                                            alt={\r\n                                                                data.nodes[0].images.edges[0]\r\n                                                                    ? data.nodes[0].images.edges[0].node.altText\r\n                                                                    : ''\r\n                                                            }\r\n                                                        />\r\n\r\n                                                        <DropZone\r\n                                                            onDrop={(files, acceptedFiles, rejectedFiles) => {\r\n                                                                this.setState({files: [...this.state.files, ...acceptedFiles]});\r\n                                                            }}>\r\n                                                            {uploadedFiles}\r\n                                                            {fileUpload}\r\n                                                        </DropZone>\r\n                                                    </Stack>\r\n                                                    <TextField\r\n                                                        readOnly={false}\r\n                                                        value={this.state.productTitle}\r\n                                                        onChange={this.handleTextChange}\r\n                                                        label=\"Product Name\"\r\n                                                        type=\"text\"\r\n                                                    />\r\n                                                    <TextField\r\n                                                        readOnly={false}\r\n                                                        value={this.state.productDescription}\r\n                                                        onChange={this.handleTextChange}\r\n                                                        label=\"Product Description\"\r\n                                                        type=\"text\"\r\n                                                    />\r\n                                                </FormLayout>\r\n                                            </Form>\r\n\r\n                                        ) : (\r\n                                            <Form onSubmit={this.handleVariantSubmit(data, shop.id)}>\r\n                                                <FormLayout>\r\n                                                    <Select\r\n                                                        label=\"Select product variant to create test for:\"\r\n                                                        disabled={false}\r\n                                                        options={variantSelectOptions}\r\n                                                        value={this.state.variantSelected}\r\n                                                        onChange={this.handleVariantSelectChange.bind(this, variantsArray)}\r\n                                                    />\r\n                                                    <Stack>\r\n\r\n                                                        <Thumbnail\r\n                                                            size=\"large\"\r\n                                                            source={\r\n                                                                data.nodes[0].variants.edges[this.state.variantSelected].node.image\r\n                                                                    ? data.nodes[0].variants.edges[this.state.variantSelected].node.image.originalSrc\r\n                                                                    : data.nodes[0].images.edges[0].node.originalSrc\r\n                                                            }\r\n                                                            alt={\r\n                                                                data.nodes[0].variants.edges[this.state.variantSelected].node.image\r\n                                                                    ? data.nodes[0].variants.edges[this.state.variantSelected].node.image.altText\r\n                                                                    : data.nodes[0].images.edges[0].node.altText\r\n                                                            }\r\n                                                        />\r\n\r\n                                                        <DropZone\r\n                                                            onDrop={(files, acceptedFiles, rejectedFiles) => {\r\n                                                                this.setState({files: [...this.state.files, ...acceptedFiles]});\r\n                                                            }}>\r\n                                                            {uploadedFiles}\r\n                                                            {fileUpload}\r\n                                                        </DropZone>\r\n\r\n                                                    </Stack>\r\n                                                    <TextField\r\n                                                        readOnly={false}\r\n                                                        value={this.state.variantTitle}\r\n                                                        onChange={this.handleTextChange}\r\n                                                        label=\"Product Name\"\r\n                                                        type=\"text\"\r\n                                                    />\r\n\r\n                                                    <TextField\r\n                                                        readOnly={false}\r\n                                                        value={this.state.variantPrice}\r\n                                                        onChange={this.handleTextChange}\r\n                                                        label=\"Original Price\"\r\n                                                        type=\"text\"\r\n                                                    />\r\n\r\n                                                    <TextField\r\n                                                        readOnly={false}\r\n                                                        value={this.state.variantDiscount}\r\n                                                        onChange={this.handleTextChange}\r\n                                                        label=\"Discounted Price\"\r\n                                                        type=\"text\"\r\n                                                    />\r\n                                                    <Button submit>Submit</Button>\r\n                                                </FormLayout>\r\n                                            </Form>\r\n                                        )}\r\n                                    </Page>\r\n                                )\r\n                            }}\r\n                        </Query>\r\n                    )\r\n                }}\r\n            </Query>\r\n        );\r\n    }\r\n\r\n    redirect = () => {\r\n        this.props.variantCreated(false)\r\n    };\r\n\r\n    itemToBeConsumed = () => {\r\n        const item = store.get('item');\r\n        const price = item.variants.edges[0].node.price;\r\n        const variantId = item.variants.edges[0].node.id;\r\n        const discounter = price * 0.1;\r\n        this.setState({ price, variantId });\r\n        return (price - discounter).toFixed(2);\r\n    };\r\n\r\n    handleTextChange = (value) => {\r\n        this.setState({ value });\r\n    };\r\n\r\n    handleProductOrVariantSelectChange = (data, newValue) => {\r\n        this.setState({\r\n            productTitle: data.nodes[0].title,\r\n            productDescription: data.nodes[0].description,\r\n            productSelected: newValue,\r\n            variantTitle: data.nodes[0].variants.edges[0].node.displayName,\r\n            variantPrice: data.nodes[0].variants.edges[0].node.price,\r\n            variantDiscount: data.nodes[0].variants.edges[0].node.compareAtPrice});\r\n    };\r\n\r\n    handleVariantSelectChange = (variantsArray, newValue) => {\r\n        newValue = parseInt(newValue, 10);\r\n        this.setState({\r\n            variantSelected: newValue,\r\n            variantTitle: variantsArray[newValue].node.displayName,\r\n            variantPrice: variantsArray[newValue].node.price,\r\n            variantDiscount: variantsArray[newValue].node.compareAtPrice });\r\n    };\r\n\r\n    handleProductSubmit = (data, shopID) => {\r\n        //data param is retrieved from gql, \"old data\", new data is stored in this.state\r\n        //send all relevant fields form old and new data with request\r\n        var product = new Product\r\n        (data.nodes[0].id, shopID, data.nodes[0].title,\r\n            data.nodes[0].images.edges[0].node.originalSrc, data.nodes[0].description, 0, 0, 0, this.state.productTitle,\r\n            this.state.productImage, this.state.productDescription, 0, 0, 0);\r\n        console.log(product);\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \"./create-product-test\",\r\n            data: JSON.stringify(product),\r\n            success: success,\r\n            dataType: 'json'\r\n        });\r\n        const success = () => {\r\n            console.log(\"Product test submission successful\");\r\n        };\r\n    };\r\n\r\n    handleVariantSubmit = (data, shopID) => {\r\n        /*$.ajax({\r\n            type: \"POST\",\r\n            url: \"./create-variant-test\",\r\n            data: data,\r\n            success: success,\r\n            dataType: JSON\r\n        });*/\r\n    };\r\n\r\n    handleSave = () => {\r\n\r\n    }\r\n}\r\n\r\nexport default CreateTestVariant;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAmCA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyMA;AACA;AACA;AA3MA;AA6MA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AApNA;AAsNA;AAAA;AAAA;AACA;AACA;AAxNA;AA0NA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AACA;AAlOA;AAoOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AA3OA;AA6OA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AA/PA;AAiQA;;;;;;;AAOA;AACA;AAzQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAaA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAFA;AAmBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AADA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAIA;AACA;AAKA;AAPA;AAeA;AACA;AAAA;AAAA;AACA;AAHA;AASA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAWA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AAKA;AAPA;AAeA;AACA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAMA;AAGA;AAGA;;;;AAxMA;AACA;AADA;AACA;AAgRA;;;;A","sourceRoot":""}